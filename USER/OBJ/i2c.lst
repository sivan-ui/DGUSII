C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\OBJ\i2c.obj
COMPILER INVOKED BY: C:\Keil_C51\C51\BIN\C51.EXE i2c.c LARGE OMF2 OPTIMIZE(9,SIZE) BROWSE INCDIR(..\USER;..\FUNC_HANDLER
                    -;..\GUI_APP) DEBUG PRINT(.\OBJ\i2c.lst) TABS(2) OBJECT(.\OBJ\i2c.obj)

line level    source

   1          /*
   2           * @Author: xw.qu
   3           * @Date: 2023-08-31 09:22:42
   4           * @LastEditors: xw.qu
   5           * @LastEditTime: 2023-08-31 10:53:41
   6           * @FilePath: \USER\i2c.c
   7           * @Description: i2c RTC
   8           * 
   9           * Copyright (c) 2023 by xw.qu, All Rights Reserved. 
  10           */
  11          #include "i2c.h"
  12          
  13          u8 Select_rtc = SELECT_RTC_TYPE; // 选择RTC类型
  14          #if SELECT_RTC_TYPE
  15          //===========================
  16          void Delayus()
  17          {
  18   1        u8 i;
  19   1        for (i = 0; i < 80; i++)
  20   1          ;
  21   1      } // 50
  22          //===========================
  23          void SDA_IN() { P3MDOUT = P3MDOUT & 0xF7; }
  24          //===========================
  25          void SDA_OUT() { P3MDOUT = P3MDOUT | 0x08; }
  26          //===========================
  27          void Rx8130_Start()
  28          {
  29   1        SDA_OUT();
  30   1        RTC_SDA = 1;
  31   1        RTC_SCL = 1;
  32   1        Delayus(); // 15
  33   1        RTC_SDA = 0;
  34   1        Delayus(); // 15
  35   1        RTC_SCL = 0;
  36   1        Delayus(); // 15
  37   1      }
  38          //================================
  39          void Rx8130_Stop()
  40          {
  41   1        SDA_OUT();
  42   1        RTC_SDA = 0;
  43   1        RTC_SCL = 1;
  44   1        Delayus(); // 15
  45   1        RTC_SDA = 1;
  46   1        Delayus(); // 15
  47   1        SDA_IN();
  48   1      }
  49          //================================
  50          void Rx8130_Mack()
  51          {
  52   1        SDA_OUT();
  53   1        RTC_SDA = 0;
  54   1        Delayus();
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 2   

  55   1        RTC_SCL = 1;
  56   1        Delayus();
  57   1        RTC_SCL = 0;
  58   1        Delayus();
  59   1      }
  60          //=================================
  61          void Rx8130_Mnak()
  62          {
  63   1        SDA_OUT();
  64   1        RTC_SDA = 1;
  65   1        Delayus();
  66   1        RTC_SCL = 1;
  67   1        Delayus();
  68   1        RTC_SCL = 0;
  69   1        Delayus();
  70   1      }
  71          //=================================
  72          void Rx8130_Cack()
  73          {
  74   1        u8 i;
  75   1        SDA_IN();
  76   1        RTC_SDA = 1;
  77   1        Delayus();
  78   1        RTC_SCL = 1;
  79   1        Delayus();
  80   1        for (i = 0; i < 50; i++)
  81   1        {
  82   2          if (!RTC_SDA)
  83   2            break;
  84   2          Delayus();
  85   2        }
  86   1        RTC_SCL = 0;
  87   1        Delayus();
  88   1        SDA_OUT();
  89   1      }
  90          //=========================================
  91          void Rx8130_Writ_Byte(u8 dat)
  92          {
  93   1        u8 i;
  94   1        SDA_OUT();
  95   1        for (i = 0; i < 8; i++)
  96   1        {
  97   2          if (dat & 0x80)
  98   2            RTC_SDA = 1;
  99   2          else
 100   2            RTC_SDA = 0;
 101   2          dat = (dat << 1);
 102   2          Delayus();
 103   2          RTC_SCL = 1;
 104   2          Delayus();
 105   2          RTC_SCL = 0;
 106   2          Delayus();
 107   2        }
 108   1        Rx8130_Cack();
 109   1      }
 110          //====================================================
 111          u8 Rx8130_Read_Byte()
 112          {
 113   1        u8 i;
 114   1        u8 Dat;
 115   1        SDA_IN();
 116   1        for (i = 0; i < 8; i++)
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 3   

 117   1        {
 118   2          Delayus();
 119   2          RTC_SCL = 1;
 120   2          Delayus();
 121   2          Dat = (Dat << 1);
 122   2          if (RTC_SDA)
 123   2            Dat = Dat | 0x01;
 124   2          else
 125   2            Dat = Dat & 0xFE;
 126   2          RTC_SCL = 0;
 127   2          Delayus();
 128   2        }
 129   1        return (Dat);
 130   1      }
 131          //====================================================
 132          u8 RTC_Get_Week(u8 years, u8 month, u8 day)
 133          {
 134   1        u8 xdata weak;
 135   1        u16 xdata year;
 136   1        year = years + 2000;
 137   1        if (month == 1 || month == 2)
 138   1        {
 139   2          month += 12, year--;
 140   2        }
 141   1        if ((year < 1752) || (year == 1752 && month < 9) || (year == 1752 && month == 9 && day < 3))
 142   1        {
 143   2          weak = (day + 2 * month + 3 * (month + 1) / 5 + year + year / 4 + 6) % 7;
 144   2        }
 145   1        else
 146   1        {
 147   2          weak = (day + 1 + 2 * month + 3 * (month + 1) / 5 + year + year / 4 - year / 100 + year / 400) % 7;
 148   2        }
 149   1        return weak;
 150   1      }
 151          // 把RTC读取并处理，写到DGUS对应的变量空间，主程序中每0.5秒调用一次
 152          void Read_Time()
 153          {
 154   1        u8 i, N, M;
 155   1        u8 Rtcdata[] = {0, 0, 0, 0, 0, 0, 0, 0};
 156   1        Rx8130_Start();
 157   1        Rx8130_Writ_Byte(0x64);
 158   1        Rx8130_Writ_Byte(0x10);
 159   1        Rx8130_Stop();
 160   1        Rx8130_Start();
 161   1        Rx8130_Writ_Byte(0x65);
 162   1        for (i = 6; i > 0; i--)
 163   1        {
 164   2          Rtcdata[i] = Rx8130_Read_Byte();
 165   2          Rx8130_Mack();
 166   2        }
 167   1        Rtcdata[0] = Rx8130_Read_Byte();
 168   1        Rx8130_Mnak();
 169   1        Rx8130_Stop();
 170   1        for (i = 0; i < 3; i++) // 年月日转换成HEX
 171   1        {
 172   2          N = Rtcdata[i] / 16;
 173   2          M = Rtcdata[i] % 16;
 174   2          Rtcdata[i] = N * 10 + M;
 175   2        }
 176   1        for (i = 4; i < 7; i++) // 时分秒转换成HEX
 177   1        {
 178   2          N = Rtcdata[i] / 16;
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 4   

 179   2          M = Rtcdata[i] % 16;
 180   2          Rtcdata[i] = N * 10 + M;
 181   2        }
 182   1        Rtcdata[3] = RTC_Get_Week(Rtcdata[0], Rtcdata[1], Rtcdata[2]); // 周
 183   1        write_dgus(0X0010, (Rtcdata[0] << 8) + Rtcdata[1]);
 184   1        write_dgus(0X0011, (Rtcdata[2] << 8) + Rtcdata[3]);
 185   1        write_dgus(0X0012, (Rtcdata[4] << 8) + Rtcdata[5]);
 186   1        write_dgus(0X0013, (Rtcdata[6] << 8) + Rtcdata[7]);
 187   1      }
 188          //====================================================================
 189          void Init_Rtc()
 190          {
 191   1        u8 i;
 192   1        Rx8130_Start();
 193   1        Rx8130_Writ_Byte(0x64);
 194   1        Rx8130_Writ_Byte(0x1d);
 195   1        Rx8130_Stop();
 196   1        Rx8130_Start();
 197   1        Rx8130_Writ_Byte(0x65);
 198   1        i = Rx8130_Read_Byte();
 199   1        Rx8130_Mack();
 200   1        Rx8130_Read_Byte();
 201   1        Rx8130_Mnak();
 202   1        Rx8130_Stop();
 203   1        if ((i & 0x02) == 0x02)
 204   1        {
 205   2          // 重新配置时间
 206   2          Rx8130_Start(); // 30=00
 207   2          Rx8130_Writ_Byte(0x64);
 208   2          Rx8130_Writ_Byte(0x30);
 209   2          Rx8130_Writ_Byte(0x00);
 210   2          Rx8130_Stop();
 211   2          Rx8130_Start(); // 1C-1F=48 00 40 10
 212   2          Rx8130_Writ_Byte(0x64);
 213   2          Rx8130_Writ_Byte(0x1C);
 214   2          Rx8130_Writ_Byte(0x48);
 215   2          Rx8130_Writ_Byte(0x00);
 216   2          Rx8130_Writ_Byte(0x40);
 217   2          Rx8130_Writ_Byte(0x10);
 218   2          Rx8130_Stop();
 219   2          Rx8130_Start(); // 10-16=RTC设置值 BCD格式
 220   2          Rx8130_Writ_Byte(0x64);
 221   2          Rx8130_Writ_Byte(0x10);
 222   2          Rx8130_Writ_Byte(0x00); // 秒
 223   2          Rx8130_Writ_Byte(0x00); // 分
 224   2          Rx8130_Writ_Byte(0x00); // 时
 225   2          Rx8130_Writ_Byte(0x01); // 星期
 226   2          Rx8130_Writ_Byte(0x01); // 日
 227   2          Rx8130_Writ_Byte(0x01); // 月
 228   2          Rx8130_Writ_Byte(0x17); // 年
 229   2          Rx8130_Stop();
 230   2          Rx8130_Start(); // 1E-1F 00 10
 231   2          Rx8130_Writ_Byte(0x64);
 232   2          Rx8130_Writ_Byte(0x1E);
 233   2          Rx8130_Writ_Byte(0x00);
 234   2          Rx8130_Writ_Byte(0x10);
 235   2          Rx8130_Stop();
 236   2        }
 237   1      }
 238          //=========================================
 239          void RTC_Set_Time()
 240          {
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 5   

 241   1        u16 Va = read_dgus(0x009C); // 0x5AA5
 242   1        if (Va == 0x5AA5)
 243   1        {
 244   2          u8 N = 0, S = 0;
 245   2          bit Flog = 1;
 246   2          u8 TimeS[] = {0, 0, 0, 0, 0, 0, 0};
 247   2          u16 V1 = read_dgus(0x009D); // 年，月
 248   2          N = (u8)(V1 >> 8);
 249   2          TimeS[0] = ((N / 10) * 16) + (N % 10);
 250   2          N = (u8)(V1);
 251   2          TimeS[1] = ((N / 10) * 16) + (N % 10);
 252   2          V1 = read_dgus(0x009E); // 日，时
 253   2          N = (u8)(V1 >> 8);
 254   2          TimeS[2] = ((N / 10) * 16) + (N % 10);
 255   2          N = (u8)(V1);
 256   2          TimeS[4] = ((N / 10) * 16) + (N % 10);
 257   2          V1 = read_dgus(0x009F); // 分，秒
 258   2          N = (u8)(V1 >> 8);
 259   2          TimeS[5] = ((N / 10) * 16) + (N % 10);
 260   2          N = (u8)(V1);
 261   2          TimeS[6] = ((N / 10) * 16) + (N % 10);
 262   2          //                        V1=read_dgus(0x00A0); //秒，x
 263   2          //                        N=(u8)(V1>>8);TimeS[6]=((N/10)*16)+(N%10);
 264   2          write_dgus(0x009c, 0);
 265   2          while (Flog)
 266   2          {
 267   3            Rx8130_Start(); // 30=00
 268   3            Rx8130_Writ_Byte(0x64);
 269   3            Rx8130_Writ_Byte(0x30);
 270   3            Rx8130_Writ_Byte(0x00);
 271   3            Rx8130_Stop();
 272   3            Rx8130_Start(); // 1C-1F=48 00 40 10
 273   3            Rx8130_Writ_Byte(0x64);
 274   3            Rx8130_Writ_Byte(0x1C);
 275   3            Rx8130_Writ_Byte(0x48);
 276   3            Rx8130_Writ_Byte(0x00);
 277   3            Rx8130_Writ_Byte(0x40);
 278   3            Rx8130_Writ_Byte(0x10);
 279   3            Rx8130_Stop();
 280   3            Rx8130_Start(); // 10-16=RTC设置值 BCD格式
 281   3            Rx8130_Writ_Byte(0x64);
 282   3            Rx8130_Writ_Byte(0x10);
 283   3            Rx8130_Writ_Byte(TimeS[6]); // 秒
 284   3            Rx8130_Writ_Byte(TimeS[5]); // 分
 285   3            Rx8130_Writ_Byte(TimeS[4]); // 时
 286   3            Rx8130_Writ_Byte(TimeS[3]); // 星期
 287   3            Rx8130_Writ_Byte(TimeS[2]); // 日
 288   3            Rx8130_Writ_Byte(TimeS[1]); // 月
 289   3            Rx8130_Writ_Byte(TimeS[0]); // 年
 290   3            Rx8130_Stop();
 291   3            Rx8130_Start(); // 1E-1F 00 10
 292   3            Rx8130_Writ_Byte(0x64);
 293   3            Rx8130_Writ_Byte(0x1E);
 294   3            Rx8130_Writ_Byte(0x00);
 295   3            Rx8130_Writ_Byte(0x10);
 296   3            Rx8130_Stop();
 297   3            Flog = 0;
 298   3          }
 299   2        }
 300   1      }
 301          //========================================================================================================
             -================================
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 6   

 302          //**********************SD2058接口程序，SDA 10K上拉到3.3V**************
 303          
 304          void delayus(unsigned char t)
 305          {
 306   1        char i;
 307   1        while (t)
 308   1        {
 309   2          for (i = 0; i < 50; i++)
 310   2          {
 311   3            i = i;
 312   3          }
 313   2          t--;
 314   2        }
 315   1      }
 316          
 317          // void SDA_IN(void)
 318          //{
 319          //  P3MDOUT=P3MDOUT&0xF7;
 320          // }
 321          
 322          // void SDA_OUT(void)
 323          //{
 324          //  P3MDOUT=P3MDOUT|0x08;
 325          // }
 326          
 327          void i2cstart(void)
 328          {
 329   1        SDA_OUT();
 330   1        RTC_SDA = 1;
 331   1        RTC_SCL = 1;
 332   1        delayus(15);
 333   1        RTC_SDA = 0;
 334   1        delayus(15);
 335   1        RTC_SCL = 0;
 336   1        delayus(15);
 337   1      }
 338          
 339          void i2cstop(void)
 340          {
 341   1        SDA_OUT();
 342   1        RTC_SDA = 0;
 343   1        RTC_SCL = 1;
 344   1        delayus(15);
 345   1        RTC_SDA = 1;
 346   1        delayus(15);
 347   1        SDA_IN();
 348   1      }
 349          
 350          void mack(void)
 351          {
 352   1        SDA_OUT();
 353   1        RTC_SDA = 0;
 354   1        delayus(5);
 355   1        RTC_SCL = 1;
 356   1        delayus(5);
 357   1        RTC_SCL = 0;
 358   1        delayus(5);
 359   1      }
 360          
 361          void mnak(void)
 362          {
 363   1        SDA_OUT();
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 7   

 364   1        RTC_SDA = 1;
 365   1        delayus(5);
 366   1        RTC_SCL = 1;
 367   1        delayus(5);
 368   1        RTC_SCL = 0;
 369   1        delayus(5);
 370   1      }
 371          
 372          void cack(void)
 373          {
 374   1        unsigned char i;
 375   1        SDA_IN();
 376   1        RTC_SDA = 1;
 377   1        delayus(5);
 378   1        RTC_SCL = 1;
 379   1        delayus(5);
 380   1        for (i = 0; i < 50; i++)
 381   1        {
 382   2          if (!RTC_SDA)
 383   2          {
 384   3            break;
 385   3          }
 386   2          delayus(5);
 387   2        }
 388   1        RTC_SCL = 0;
 389   1        delayus(5);
 390   1        SDA_OUT();
 391   1      }
 392          
 393          // I2C 写入1个字节
 394          void i2cbw(unsigned char dat)
 395          {
 396   1        char i;
 397   1        SDA_OUT();
 398   1        for (i = 0; i < 8; i++)
 399   1        {
 400   2          if (dat & 0x80)
 401   2          {
 402   3            RTC_SDA = 1;
 403   3          }
 404   2          else
 405   2          {
 406   3            RTC_SDA = 0;
 407   3          }
 408   2          dat = (dat << 1);
 409   2          delayus(5);
 410   2          RTC_SCL = 1;
 411   2          delayus(5);
 412   2          RTC_SCL = 0;
 413   2          delayus(5);
 414   2        }
 415   1        cack();
 416   1      }
 417          
 418          // i2c 读取1个字节数据
 419          unsigned char i2cbr(void)
 420          {
 421   1        char i;
 422   1        unsigned char dat;
 423   1        SDA_IN();
 424   1        for (i = 0; i < 8; i++)
 425   1        {
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 8   

 426   2          delayus(5);
 427   2          RTC_SCL = 1;
 428   2          delayus(5);
 429   2          dat = (dat << 1);
 430   2          if (RTC_SDA)
 431   2          {
 432   3            dat = dat | 0x01;
 433   3          }
 434   2          else
 435   2          {
 436   3            dat = dat & 0xFE;
 437   3          }
 438   2          // dat=(dat<<1);
 439   2          RTC_SCL = 0;
 440   2          delayus(5);
 441   2        }
 442   1        return (dat);
 443   1      }
 444          
 445          // 检查SD2058有没有掉电，掉电则初始化SD2058，设置时间为2021.01.01 星期五 00:00:00
 446          void init_rtc_1(void)
 447          {
 448   1        unsigned char dat1, dat2;
 449   1        // 检查有没有掉电
 450   1        i2cstart();
 451   1        i2cbw(0x64);
 452   1        i2cbw(0x0f); // 0x0f最低位
 453   1        i2cstart();
 454   1        i2cbw(0x65);
 455   1        dat2 = i2cbr();
 456   1        mack();
 457   1        dat1 = i2cbr();
 458   1        mnak();
 459   1        i2cstop();
 460   1        if (dat2 & 0x01)
 461   1        {
 462   2          if (dat2 & 0x84) // WRTC2 WRTC3是否为0，是的话，写0
 463   2          {
 464   3            dat2 &= ~0x84;
 465   3            i2cstart();
 466   3            i2cbw(0x64);
 467   3            i2cbw(0x0f);
 468   3            i2cbw(dat2);
 469   3            i2cstop();
 470   3          }
 471   2          dat2 &= ~0x01;
 472   2          // 读WRTC1是否为0
 473   2          if (dat1 & 0x80) // WRTC1是否为1
 474   2          {
 475   3            dat1 &= ~0x80;
 476   3            i2cstart();
 477   3            i2cbw(0x64);
 478   3            i2cbw(0x10);
 479   3            i2cbw(dat1);
 480   3            i2cstop();
 481   3          }
 482   2      
 483   2          // 写使能
 484   2          dat1 |= 0x80;
 485   2          i2cstart();
 486   2          i2cbw(0x64);
 487   2          i2cbw(0x10);
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 9   

 488   2          i2cbw(dat1);
 489   2          i2cstop();
 490   2          dat2 |= 0x84;
 491   2          i2cstart();
 492   2          i2cbw(0x64);
 493   2          i2cbw(0x0f);
 494   2          i2cbw(dat2);
 495   2          i2cstop();
 496   2      
 497   2          // 重新配置时间
 498   2          i2cstart(); // 10-16=RTC设置值 BCD格式
 499   2          i2cbw(0x64);
 500   2          i2cbw(0x00);
 501   2          i2cbw(0x00); // 秒
 502   2          i2cbw(0x00); // 分
 503   2          i2cbw(0x80); // 时，小时最高位是24-12小时配置位
 504   2          i2cbw(0x05); // 星期
 505   2          i2cbw(0x01); // 日
 506   2          i2cbw(0x01); // 月
 507   2          i2cbw(0x21); // 年
 508   2          i2cstop();
 509   2          dat2 &= ~0x84;
 510   2          dat1 &= ~0x80;
 511   2          i2cstart();
 512   2          i2cbw(0x64);
 513   2          i2cbw(0x10);
 514   2          i2cbw(dat1);
 515   2          i2cstop();
 516   2          i2cstart();
 517   2          i2cbw(0x64);
 518   2          i2cbw(0x0f);
 519   2          i2cbw(dat2);
 520   2          i2cstop();
 521   2        }
 522   1      }
 523          
 524          void rtc_config(u8 *prtc_set)
 525          {
 526   1        u8 dat, dat1;
 527   1        i2cstart();
 528   1        i2cbw(0x64);
 529   1        i2cbw(0x0f); // 0x10
 530   1        i2cstart();
 531   1        i2cbw(0x65);
 532   1        dat = i2cbr();
 533   1        mack();
 534   1        dat1 = i2cbr();
 535   1        mnak();
 536   1        i2cstop();
 537   1        dat1 |= 0x80;
 538   1        i2cstart();
 539   1        i2cbw(0x64);
 540   1        i2cbw(0x10);
 541   1        i2cbw(dat1);
 542   1        i2cstop();
 543   1        dat |= 0x84;
 544   1        i2cstart();
 545   1        i2cbw(0x64);
 546   1        i2cbw(0x0f);
 547   1        i2cbw(dat);
 548   1        i2cstop();
 549   1      
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 10  

 550   1        i2cstart(); // 10-16=RTC设置值 BCD格式
 551   1        i2cbw(0x64);
 552   1        i2cbw(0x00);
 553   1        i2cbw(prtc_set[6]); // 秒
 554   1        i2cbw(prtc_set[5]); // 分
 555   1        i2cbw(prtc_set[4]); // 时
 556   1        i2cbw(prtc_set[3]); // 星期
 557   1        i2cbw(prtc_set[2]); // 日
 558   1        i2cbw(prtc_set[1]); // 月
 559   1        i2cbw(prtc_set[0]); // 年
 560   1        i2cstop();
 561   1        dat &= ~0x84;
 562   1        dat1 &= ~0x80;
 563   1        i2cstart();
 564   1        i2cbw(0x64);
 565   1        i2cbw(0x10);
 566   1        i2cbw(dat1);
 567   1        i2cstop();
 568   1        i2cstart();
 569   1        i2cbw(0x64);
 570   1        i2cbw(0x0f);
 571   1        i2cbw(dat);
 572   1        i2cstop();
 573   1      }
 574          
 575          // 把RTC读取并处理，写到DGUS对应的变量空间，主程序中每0.5秒调用一次
 576          void rdtime(void)
 577          {
 578   1        unsigned char rtcdata[8];
 579   1        unsigned char i, n, m;
 580   1        i2cstart();
 581   1        i2cbw(0x64);
 582   1        i2cbw(0x00);
 583   1        i2cstart();
 584   1        i2cbw(0x65);
 585   1        for (i = 6; i > 0; i--)
 586   1        {
 587   2          rtcdata[i] = i2cbr();
 588   2          mack();
 589   2        }
 590   1        rtcdata[0] = i2cbr();
 591   1        mnak();
 592   1        i2cstop();
 593   1        rtcdata[4] &= 0x7F;
 594   1        for (i = 0; i < 3; i++) // 年月日转换成HEX
 595   1        {
 596   2          n = rtcdata[i] / 16;
 597   2          m = rtcdata[i] % 16;
 598   2          rtcdata[i] = n * 10 + m;
 599   2        }
 600   1        for (i = 4; i < 7; i++) // 时分秒转换成HEX
 601   1        {
 602   2          n = rtcdata[i] / 16;
 603   2          m = rtcdata[i] % 16;
 604   2          rtcdata[i] = n * 10 + m;
 605   2        }
 606   1        // 星期可以不用处理
 607   1        rtcdata[7] = 0;
 608   1        write_dgusii_vp(0x0010, (u8 *)rtcdata, 8); // 写入DGUS变量空间
 609   1      }
 610          
 611          // void btn_click(u16 x,u16 y)
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 11  

 612          //{
 613          //  u16 btn_check[4];
 614          //  btn_check[0]=0x5aa5;
 615          //  btn_check[1]=0x0004;
 616          //  btn_check[2]=x;
 617          //  btn_check[3]=y;
 618          //  write_dgusii_vp(0x00D4,(u8*)&btn_check[0],4);
 619          // }
 620          
 621          u8 BCD(u8 dat)
 622          {
 623   1        return ((dat / 10) << 4) | (dat % 10);
 624   1      }
 625          
 626          // u8 IBCD(u8 dat)
 627          //{
 628          //   return (dat>>4)*10+(dat&0x0f);
 629          // }
 630          
 631          u8 rtc_get_week_1(u8 year, u8 month, u8 day)
 632          {
 633   1        u16 tmp, mon, y;
 634   1        u8 week;
 635   1        if ((month == 1) || (month == 2))
 636   1        {
 637   2          mon = month + 12;
 638   2          y = year - 1;
 639   2        }
 640   1        else
 641   1        {
 642   2          mon = month;
 643   2          y = year;
 644   2        }
 645   1        tmp = y + (y / 4) + (((mon + 1) * 26) / 10) + day - 36;
 646   1        week = tmp % 7;
 647   1        return week;
 648   1      }
 649          
 650          void check_rtc_set(void)
 651          {
 652   1        u8 rtc_parm[8], rtc_set[8];
 653   1        read_dgusii_vp(0x9c, rtc_parm, 4);
 654   1        if ((rtc_parm[0] == 0x5A) && (rtc_parm[1] == 0xA5)) // 启动配置
 655   1        {
 656   2          rtc_set[0] = BCD(rtc_parm[2]);
 657   2          rtc_set[1] = BCD(rtc_parm[3]);
 658   2          rtc_set[2] = BCD(rtc_parm[4]);
 659   2          rtc_set[3] = rtc_get_week_1(rtc_parm[2], rtc_parm[3], rtc_parm[4]);
 660   2          rtc_set[4] = BCD(rtc_parm[5]);
 661   2          rtc_set[4] |= 0x80;
 662   2          rtc_set[5] = BCD(rtc_parm[6]);
 663   2          rtc_set[6] = BCD(rtc_parm[7]);
 664   2          rtc_config(rtc_set);
 665   2          rtc_parm[0] = 0;
 666   2          rtc_parm[1] = 0;
 667   2          write_dgusii_vp(0x9c, rtc_parm, 2);
 668   2        }
 669   1      }
 670          
 671          void Clock_1() // SD2058
 672          {
 673   1      
C51 COMPILER V9.60.0.0   I2C                                                               11/02/2023 16:36:08 PAGE 12  

 674   1        if (RTC_Flog == 0)
 675   1        {
 676   2          RTC_Flog = 1;
 677   2          init_rtc_1();
 678   2        }
 679   1        if (SysTick_RTC >= 500)
 680   1        {
 681   2          rdtime(); // 更新硬件RTC时间
 682   2          SysTick_RTC = 0;
 683   2        }
 684   1        check_rtc_set();
 685   1      }
 686          
 687          #endif
 688          
 689          //========================================================================================================
             -================================
 690          void Clock()
 691          {
 692   1        bit k = 0;
 693   1        k = 1;
 694   1      #if SELECT_RTC_TYPE
 695   1        if (Select_rtc == 1) // RX8130
 696   1        {
 697   2          if (RTC_Flog == 0)
 698   2          {
 699   3            RTC_Flog = 1;
 700   3            Init_Rtc();
 701   3          }
 702   2          if (SysTick_RTC >= 500)
 703   2          {
 704   3            Read_Time(); // 更新硬件RTC时间
 705   3            SysTick_RTC = 0;
 706   3          }
 707   2          RTC_Set_Time();
 708   2        }
 709   1        else if (Select_rtc == 2) // SD2058
 710   1        {
 711   2          Clock_1();
 712   2        }
 713   1      #endif
 714   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2411    ----
   CONSTANT SIZE    =     15    ----
   XDATA SIZE       =      1      63
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
