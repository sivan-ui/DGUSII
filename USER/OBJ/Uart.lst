C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\OBJ\Uart.obj
COMPILER INVOKED BY: C:\Keil_C51\C51\BIN\C51.EXE Uart.c LARGE OMF2 OPTIMIZE(9,SIZE) BROWSE INCDIR(..\USER;..\FUNC_HANDLE
                    -R;..\GUI_APP) DEBUG PRINT(.\OBJ\Uart.lst) TABS(2) OBJECT(.\OBJ\Uart.obj)

line level    source

   1          /*
   2           * @Author: xw.qu
   3           * @Date: 2023-08-31 09:22:43
   4           * @LastEditors: xw.qu
   5           * @LastEditTime: 2023-08-31 10:53:58
   6           * @FilePath: \USER\Uart.c
   7           * @Description: uart function
   8           * 
   9           * Copyright (c) 2023 by xw.qu, All Rights Reserved. 
  10           */
  11          #include "Uart.h"
  12          #include <stdio.h>
  13          #include <string.h>
  14          #include <math.h>
  15          #include "stdarg.h"
  16          
  17          void flash_data_init();
  18          
  19          //**********************************************************
  20          #if UART2_ENABLE
  21          u8 xdata R_u2[UART2_RX_LENTH]; // 串口2接受数组
  22          #else
              u8 xdata R_u2[20]; // 串口2接受数组
              #endif
  25          // u8          xdata         W_u2[135];   //串口2发送数组
  26          u8 xdata R_OD2 = 0;  // 串口2收到数据
  27          u16 xdata R_CN2 = 0; // 口2长度计数器
  28          u8 xdata T_O2 = 0;   // 口2超时计数器
  29          bit Busy2 = 0;       // 串口2发送标志
  30          //**********************************************************
  31          #if UART3_ENABLE
              u8 xdata R_u3[UART3_RX_LENTH]; // 串口3接受数组
              #else
  34          u8 xdata R_u3[20]; // 串口3接受数组
  35          #endif
  36          u8 xdata R_OD3 = 0;  // 串口3收到数据
  37          u16 xdata R_CN3 = 0; // 口3长度计数器
  38          u8 xdata T_O3 = 0;   // 口3超时计数器
  39          bit Busy3 = 0;       // 串口3发送标志
  40          // ========================================================================
  41          #if UART4_ENABLE
  42          // u8          xdata        R_u4[UART4_RX_LENTH];         //串口4接受数组
  43          #else
              u8 xdata R_u4[20]; // 串口4接受数组
              #endif
  46          // u8        xdata        W_u4[255];          //串口4发送数组
  47          u8 xdata R_OD4 = 0;  // 串口4收到数据
  48          u16 xdata R_CN4 = 0; // 口4长度计数器
  49          u8 xdata T_O4 = 0;   // 口4超时计数器
  50          bit Busy4 = 0;       // 串口4发送标志
  51          //**********************************************************
  52          #if UART5_ENABLE
  53          u8 xdata R_u5[UART5_RX_LENTH]; // 串口5接受数组
  54          #else
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 2   

              u8 xdata R_u5[20]; // 串口5接受数组
              #endif
  57          // u8          xdata         W_u5[135];   //串口5发送数组
  58          u8 xdata R_OD5 = 0;  // 串口5收到数据
  59          u16 xdata R_CN5 = 0; // 口5长度计数器
  60          u8 xdata T_O5 = 0;   // 口5超时计数器
  61          bit Busy5 = 0;       // 串口5发送标志
  62          //**********************************************************
  63          
  64          bit Response_flog = 0;    // 应答用
  65          bit Auto_data_upload = 0; // 数据自动上传用
  66          bit Crc_check_flog = 0;   // Crc校验标记
  67          u8 xdata i_test;
  68          /****************************************************************************/
  69          unsigned short HR[HR_MAX_NUMBER];
  70          #define msg_type_TYPE 1
  71          #define enterprise_TYPE 2
  72          #define timestamp_TYPE 3
  73          #define relay_modules_TYPE 4
  74          #define srelay_modules_TYPE 5
  75          #define dimmer_modules_TYPE 6
  76          #define panel_modules_TYPE 7
  77          #define modules_scene_panels_TYPE 8
  78          
  79          #define modules_name_address 0x2000
  80          #define modules_name_offset 0x0020
  81          #define switch_name_address 0x2500
  82          #define switch_name_offset 0x0020
  83          
  84          #define PRINTF_USART_NUM 5
  85          
  86          const char *base64char = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  87          int num_strchr(const char *str, char c) //
  88          {
  89   1        const char *pindex = strchr(str, c);
  90   1        if (NULL == pindex)
  91   1        {
  92   2          return -1;
  93   2        }
  94   1        return pindex - str;
  95   1      }
  96          int base64_decode(const char *base64, unsigned char *dedata)
  97          {
  98   1        int i = 0, j = 0;
  99   1        int trans[4] = {0, 0, 0, 0};
 100   1        for (; base64[i] != '\0'; i += 4)
 101   1        {
 102   2      
 103   2          trans[0] = num_strchr(base64char, base64[i]);
 104   2          trans[1] = num_strchr(base64char, base64[i + 1]);
 105   2      
 106   2          dedata[j++] = ((trans[0] << 2) & 0xfc) | ((trans[1] >> 4) & 0x03);
 107   2      
 108   2          if (base64[i + 2] == '=')
 109   2          {
 110   3            continue;
 111   3          }
 112   2          else
 113   2          {
 114   3            trans[2] = num_strchr(base64char, base64[i + 2]);
 115   3          }
 116   2      
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 3   

 117   2          dedata[j++] = ((trans[1] << 4) & 0xf0) | ((trans[2] >> 2) & 0x0f);
 118   2      
 119   2          if (base64[i + 3] == '=')
 120   2          {
 121   3            continue;
 122   3          }
 123   2          else
 124   2          {
 125   3            trans[3] = num_strchr(base64char, base64[i + 3]);
 126   3          }
 127   2      
 128   2          dedata[j++] = ((trans[2] << 6) & 0xc0) | (trans[3] & 0x3f);
 129   2        }
 130   1      
 131   1        dedata[j] = '\0';
 132   1        printf("hello word!");
 133   1        return 0;
 134   1      }
 135          #if UART2_ENABLE
 136          void Uart2_Init(u32 baud_rate)
 137          {
 138   1        u16 i = 0;
 139   1        i = 1024 - FOSC / 64 / baud_rate;
 140   1        SREL2H = (u8)(i >> 8); // 波特率 = FCLK/64*(1024-SREL)
 141   1        SREL2L = (u8)i;        //
 142   1        MUX_SEL |= 0x40;       // UART2引出,UART3不引出，WDT关闭
 143   1        ADCON = 0x80;          // 选择SREL0H:L作为波特率发生器
 144   1        SCON2 = 0x50;          // 接受使能和模式设置
 145   1        PCON &= 0x7F;          // SMOD=0
 146   1        IEN0 |= 0X10;          // ES0=1  串口2 接受+发送中断
 147   1        EA = 1;
 148   1      }
 149          #endif
 150          /****************************************************************************/
 151          #if UART3_ENABLE
              void Uart3_Init(u32 baud_rate)
              {
                u16 i = 0;
                i = 1024 - FOSC / 32 / baud_rate;
                SREL3H = (u8)(i >> 8); // 波特率 = FCLK/64*(1024-SREL)
                SREL3L = (u8)i;        // S_2/115200=224=0X03C8 1024-206438400/(32*115200)=0X03C8
                MUX_SEL |= 0x20;       // UART3引出
                P0MDOUT |= 0x40;       // P0.6 TXD 推挽
                SCON3 = 0x90;          // 接受使能和模式设置
                IEN2 |= 0x01;          // 中断使能
                EA = 1;
              }
              #endif
 165          /****************************************************************************/
 166          #if UART4_ENABLE
 167          void Uart4_Init(u32 baud_rate)
 168          {
 169   1        u16 i = 0;
 170   1        i = FOSC / 8 / baud_rate;
 171   1        BODE4_DIV_H = (u8)(i >> 8); //
 172   1        BODE4_DIV_L = (u8)i;        //
 173   1        SCON4T = 0x80;              // 发送使能和模式设置
 174   1        SCON4R = 0x80;              // 接受使能和模式设置
 175   1        ES4R = 1;                   // 中断接受使能
 176   1        ES4T = 1;                   // 中断发送使能
 177   1        TR4 = 0;
 178   1        EA = 1;
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 4   

 179   1      }
 180          #endif
 181          /****************************************************************************/
 182          #if UART5_ENABLE
 183          void Uart5_Init(u32 baud_rate)
 184          {
 185   1        u16 i = 0;
 186   1        i = FOSC / 8 / baud_rate;
 187   1        BODE5_DIV_H = (u8)(i >> 8); //
 188   1        BODE5_DIV_L = (u8)i;        //
 189   1        SCON5T = 0x80;              // 发送使能和模式设置,8bit模式
 190   1        //     SCON5T= 0xC0;//发送使能和模式设置,9bit模式
 191   1        SCON5R = 0x80; // 接受使能和模式设置
 192   1        ES5R = 1;      // 中断接受使能
 193   1        ES5T = 1;      // 中断发送使能
 194   1        TR5 = 0;
 195   1        EA = 1;
 196   1      }
 197          #endif
 198          /*************************************************************************************************/
 199          void uart_init()
 200          {
 201   1      #if UART2_ENABLE
 202   1        Uart2_Init(BAUD_UART2);
 203   1      #endif
 204   1      #if UART3_ENABLE
                Uart3_Init(BAUD_UART3);
              #endif
 207   1      #if UART4_ENABLE
 208   1        Uart4_Init(BAUD_UART4);
 209   1      #endif
 210   1      #if UART5_ENABLE
 211   1        Uart5_Init(BAUD_UART5);
 212   1      #endif
 213   1      
 214   1        // #if DEBUG
 215   1        //
 216   1        // #else
 217   1        //      flash_data_init();
 218   1        // #endif
 219   1      }
 220          
 221          /*************************************************************
 222          函数名：void  uart_send_byte(u8 Uart_number,u8 Dat)
 223          参数：Uart_number=串口号=2，3，4，5；Dat为需要发送的byte
 224          作者：cuijia
 225          日期：20220526
 226          ***********************************************************/
 227          void uart_send_byte(u8 Uart_number, u8 Dat)
 228          {
 229   1        if (Uart_number == 2)
 230   1        {
 231   2          while (Busy2)
 232   2            ;
 233   2          Busy2 = 1;
 234   2          SBUF2 = Dat;
 235   2        }
 236   1        else if (Uart_number == 3)
 237   1        {
 238   2          while (Busy3)
 239   2            ;
 240   2          Busy3 = 1;
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 5   

 241   2          SBUF3 = Dat;
 242   2        }
 243   1        else if (Uart_number == 4)
 244   1        {
 245   2          TR4 = 1;
 246   2          while (Busy4)
 247   2            ;
 248   2          Busy4 = 1;
 249   2          SBUF4_TX = Dat;
 250   2          while (Busy4)
 251   2            ;
 252   2          TR4 = 0;
 253   2        }
 254   1        else if (Uart_number == 5)
 255   1        {
 256   2          while (Busy5)
 257   2            ;
 258   2          Busy5 = 1;
 259   2          SBUF5_TX = Dat;
 260   2        }
 261   1      }
 262          /****************************数据自动上传************************************************/
 263          void uart_data_send(u8 *Arr, u8 Uartnum, bit Outo_send, bit Crc_ck)
 264          {
 265   1        u8 i = 0;
 266   1        u16 V1 = read_dgus(0x0f01);
 267   1        Auto_data_upload = Outo_send;
 268   1        if (Auto_data_upload)
 269   1        {
 270   2          Crc_check_flog = Crc_ck;
 271   2          if (Crc_check_flog) // 带Crc校验
 272   2          {
 273   3            u16 Crc = 0;
 274   3            Arr[2] = (((u8)V1) << 1) + 6;
 275   3            Crc = crc16table(Arr + 3, Arr[2] - 2);
 276   3            Arr[Arr[2] + 1] = Crc & 0x00FF;
 277   3            Arr[Arr[2] + 2] = Crc >> 8;
 278   3            if (Uartnum == 4)
 279   3              TR4 = 1;
 280   3            else if (Uartnum == 5)
 281   3              TR5 = 1;
 282   3            for (i = 0; i < Arr[2] + 3; i++)
 283   3              uart_send_byte(Uartnum, Arr[i]);
 284   3            if (Uartnum == 4)
 285   3            {
 286   4              while (Busy4)
 287   4                ;
 288   4              TR4 = 0;
 289   4            }
 290   3            else if (Uartnum == 5)
 291   3            {
 292   4              while (Busy5)
 293   4                ;
 294   4              TR5 = 0;
 295   4            }
 296   3            Arr[2] = (((u8)V1) << 1) + 4;
 297   3          }
 298   2          else
 299   2          {
 300   3            if (Uartnum == 4)
 301   3              TR4 = 1;
 302   3            else if (Uartnum == 5)
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 6   

 303   3              TR5 = 1;
 304   3            for (i = 0; i < Arr[2] + 3; i++)
 305   3              uart_send_byte(Uartnum, Arr[i]);
 306   3            if (Uartnum == 4)
 307   3            {
 308   4              while (Busy4)
 309   4                ;
 310   4              TR4 = 0;
 311   4            }
 312   3            else if (Uartnum == 5)
 313   3            {
 314   4              while (Busy5)
 315   4                ;
 316   4              TR5 = 0;
 317   4            }
 318   3          }
 319   2        }
 320   1      }
 321          /****************************数据自动上传************************************************/
 322          void Sw_Data_Send()
 323          {
 324   1        u16 Va = read_dgus(0x0f00);
 325   1        u16 V1 = read_dgus(0x0f01);
 326   1        if (((u8)(Va >> 8)) == 0x5A)
 327   1        {
 328   2          u8 i = 0;
 329   2          u16 Temp = 0;
 330   2          u8 Val[100] = {0}; // 5A A5 06 83 ADDR Len XX XX
 331   2          Val[0] = 0x5A;
 332   2          Val[1] = 0xA5;
 333   2          Val[2] = (((u8)V1) << 1) + 4;
 334   2          Val[3] = 0x83;
 335   2          Val[4] = (u8)Va;
 336   2          Val[5] = (u8)(V1 >> 8);
 337   2          Val[6] = (u8)V1;
 338   2          for (i = 0; i < (u8)V1; i++)
 339   2          {
 340   3            Temp = read_dgus(((Val[4] << 8) + Val[5] + i));
 341   3            Val[7 + 2 * i] = (u8)(Temp >> 8);
 342   3            Val[8 + 2 * i] = (u8)(Temp);
 343   3          }
 344   2      #if UART2_ENABLE
 345   2          uart_data_send(Val, 2, DATA_UPLOAD_UART2, CRC_CHECK_UART2);
 346   2      #endif
 347   2      #if UART3_ENABLE
                  uart_data_send(Val, 3, DATA_UPLOAD_UART3, CRC_CHECK_UART3);
              #endif
 350   2      #if UART4_ENABLE
 351   2          uart_data_send(Val, 4, DATA_UPLOAD_UART4, CRC_CHECK_UART4);
 352   2      #endif
 353   2      #if UART5_ENABLE
 354   2          uart_data_send(Val, 5, DATA_UPLOAD_UART5, CRC_CHECK_UART5);
 355   2      #endif
 356   2          write_dgus(0x0f00, 0);
 357   2          write_dgus(0x0f01, 0);
 358   2        }
 359   1      }
 360          
 361          /****************************************************************************/
 362          void deal_82_cmd(u8 Uart, u8 *arr)
 363          {
 364   1        u8 i = 0;
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 7   

 365   1        if (Crc_check_flog == 0) // 不含CRC检验
 366   1        {
 367   2          write_dgusii_vp((arr[4] << 8) + arr[5], arr + 6, arr[2] - 3);
 368   2          if (Response_flog)
 369   2          {
 370   3            u8 Temp_arr[] = {DTHD1, DTHD2, 0X03, 0X82, 0X4F, 0X4B};
 371   3            if (Uart == 4)
 372   3              TR4 = 1;
 373   3            else if (Uart == 5)
 374   3              TR5 = 1;
 375   3            for (i = 0; i < 6; i++)
 376   3              uart_send_byte(Uart, Temp_arr[i]); // 5A A5 03 82 4F 4B
 377   3            if (Uart == 4)
 378   3            {
 379   4              while (Busy4)
 380   4                ;
 381   4              TR4 = 0;
 382   4            }
 383   3            else if (Uart == 5)
 384   3            {
 385   4              while (Busy5)
 386   4                ;
 387   4              TR5 = 0;
 388   4            }
 389   3          }
 390   2        }
 391   1        else // 带CRC校验
 392   1        {
 393   2          u16 Crc = 0, Crc_check = 0;
 394   2          Crc = crc16table((u8 *)(&arr[3]), arr[2] - 2);
 395   2          Crc_check = (u16)(arr[3 + arr[2] - 1] << 8) + (u16)(arr[3 + arr[2] - 2]);
 396   2          if (Crc == Crc_check)
 397   2          {
 398   3            write_dgusii_vp((arr[4] << 8) + arr[5], arr + 6, arr[2] - 5);
 399   3            if (Response_flog)
 400   3            {
 401   4              u8 Temp_arr[] = {DTHD1, DTHD2, 0X05, 0X82, 0X4F, 0X4B, 0XA5, 0XEF};
 402   4              if (Uart == 4)
 403   4                TR4 = 1;
 404   4              else if (Uart == 5)
 405   4                TR5 = 1;
 406   4              for (i = 0; i < 8; i++)
 407   4                uart_send_byte(Uart, Temp_arr[i]); // 5A A5 03 82 4F 4B
 408   4              if (Uart == 4)
 409   4              {
 410   5                while (Busy4)
 411   5                  ;
 412   5                TR4 = 0;
 413   5              }
 414   4              else if (Uart == 5)
 415   4              {
 416   5                while (Busy5)
 417   5                  ;
 418   5                TR5 = 0;
 419   5              }
 420   4            }
 421   3          }
 422   2        }
 423   1      }
 424          /****************************************************************************/
 425          void deal_83_cmd(u8 Uart, u8 *arr, u8 *arr1)
 426          {
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 8   

 427   1        u8 i = 0;
 428   1        if (Crc_check_flog == 0) // 不含CRC检验
 429   1        {
 430   2          for (i = 0; i < 7; i++)
 431   2            arr[i] = arr1[i];
 432   2          read_dgusii_vp((arr[4] << 8) + arr[5], (u8 *)&arr[7], arr[6]);
 433   2          arr[2] = (2 * arr[6]) + 4;
 434   2          if (Uart == 4)
 435   2            TR4 = 1;
 436   2          else if (Uart == 5)
 437   2            TR5 = 1;
 438   2          for (i = 0; i < (arr[2] + 3); i++)
 439   2            uart_send_byte(Uart, arr[i]);
 440   2          if (Uart == 4)
 441   2          {
 442   3            while (Busy4)
 443   3              ;
 444   3            TR4 = 0;
 445   3          }
 446   2          else if (Uart == 5)
 447   2          {
 448   3            while (Busy5)
 449   3              ;
 450   3            TR5 = 0;
 451   3          }
 452   2        }
 453   1        else // 带Crc检验
 454   1        {
 455   2          u16 Crc = 0, Crc_check = 0;
 456   2          for (i = 0; i < 9; i++)
 457   2            arr[i] = arr1[i];
 458   2          Crc = crc16table((u8 *)(&arr[3]), arr[2] - 2);
 459   2          Crc_check = (u16)(arr[3 + arr[2] - 1] << 8) + (u16)(arr[3 + arr[2] - 2]);
 460   2          if (Crc == Crc_check)
 461   2          {
 462   3            read_dgusii_vp((arr[4] << 8) + arr[5], (u8 *)&arr[7], arr[6]);
 463   3            arr[2] = (2 * arr[6]) + 4 + 2;
 464   3            Crc = crc16table(arr + 3, arr[2] - 2);
 465   3            arr[arr[2] + 1] = Crc & 0x00FF;
 466   3            arr[arr[2] + 2] = Crc >> 8;
 467   3            if (Uart == 4)
 468   3              TR4 = 1;
 469   3            else if (Uart == 5)
 470   3              TR5 = 1;
 471   3            for (i = 0; i < (arr[2] + 3); i++)
 472   3              uart_send_byte(Uart, arr[i]);
 473   3            if (Uart == 4)
 474   3            {
 475   4              while (Busy4)
 476   4                ;
 477   4              TR4 = 0;
 478   4            }
 479   3            else if (Uart == 5)
 480   3            {
 481   4              while (Busy5)
 482   4                ;
 483   4              TR5 = 0;
 484   4            }
 485   3          }
 486   2        }
 487   1      }
 488          /*********************************************************************************************************
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 9   

             -****
 489          函数名：deal_uart_data(u8* Arr_rece,u16* Data_len,u8 Uart_num,bit Response,bit Crc_ck)
 490          参数：Arr_rece为串口接收数组，Data_len接收数据长度地址，Uart_num串口号，Response是否带应答，Crc_ck是否带校
             -验
 491          作者：cuijia
 492          日期：20220526
 493          **********************************************************************************************************
             -***/
 494          void deal_uart_data(u8 *Arr_rece, u16 *Data_len, u8 Uart_num, bit Response, bit Crc_ck)
 495          {
 496   1        u16 N = 0;
 497   1        bit Flog = 1;
 498   1        while (Flog)
 499   1        {
 500   2          if ((Arr_rece[N] == DTHD1) && (Arr_rece[N + 1] == DTHD2)) // 5A A5 07 82 1000 0001 0002
 501   2          {
 502   3            if (Arr_rece[N + 3] == 0x82)
 503   3            {
 504   4              Response_flog = Response;            // 应答标记
 505   4              Crc_check_flog = Crc_ck;             // Crc标记
 506   4              deal_82_cmd(Uart_num, Arr_rece + N); // 处理82指令
 507   4              N = N + Arr_rece[N + 2] + 2;
 508   4            }                                 // 0   1  2  3  4 5  6  7 8  9 10
 509   3            else if (Arr_rece[N + 3] == 0x83) // 5A A5 08 83 1000 02 0001 0002
 510   3            {
 511   4      
 512   4              u8 Val[FRAME_LEN] = {0};
 513   4              Crc_check_flog = Crc_ck;                  // Crc标记
 514   4              deal_83_cmd(Uart_num, Val, Arr_rece + N); // 处理83指令
 515   4              N = N + Arr_rece[N + 2] + 2;
 516   4            }
 517   3            else
 518   3              N++;
 519   3          }
 520   2          if (N < (*Data_len - 4))
 521   2            N++;
 522   2          else
 523   2            Flog = 0;
 524   2        }
 525   1      }
 526          
 527          void uart_frame_deal()
 528          {
 529   1      
 530   1        /*test LKC*/
 531   1      #if DEBUG
                if (0 == R_OD4_flag)
                {
                  R_OD4 = 1;
                  R_OD4_flag = 1;
                }
                else
                {
                }
              #endif
 541   1        if ((1 == R_OD2) && (T_O2 == 0))
 542   1        {
 543   2          deal_uart_data(R_u2, (u16 *)(&R_CN2), 2, RESPONSE_UART2, CRC_CHECK_UART2);
 544   2          //                 USER_PRINTF("USART2_GET_DATA\n");
 545   2          R_OD2 = 0;
 546   2          R_CN2 = 0;
 547   2        } // 串口2数据收发
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 10  

 548   1        if ((1 == R_OD3) && (T_O3 == 0))
 549   1        {
 550   2          deal_uart_data(R_u3, (u16 *)(&R_CN3), 3, RESPONSE_UART3, CRC_CHECK_UART3);
 551   2          R_OD3 = 0;
 552   2          R_CN3 = 0;
 553   2        } // 串口2数据收发
 554   1        //            if((1==R_OD4)&&(T_O4==0)){
 555   1        ////                 deal_uart4_data(R_u4,(u16*)(&R_CN4),4,RESPONSE_UART4,CRC_CHECK_UART4);
 556   1        //                 R_OD4=0;R_CN4=0;
 557   1        //            } //串口4数据收发
 558   1        if ((1 == R_OD5) && (T_O5 == 0))
 559   1        {
 560   2          deal_uart_data(R_u5, (u16 *)(&R_CN5), 5, RESPONSE_UART5, CRC_CHECK_UART5);
 561   2          R_OD5 = 0;
 562   2          R_CN5 = 0;
 563   2          //                USER_PRINTF("USART5_GET_DATA\n");
 564   2        } // 串口5数据收发
 565   1      }
 566          //=========================//
 567          //=========中断函数========//
 568          //=========================//
 569          
 570          //========================
 571          void uart4_Risr() interrupt 11 // 串口4中断接收
 572          {
 573   1        //            R_u4[R_CN4]=SBUF4_RX;
 574   1        mbh_uartRxIsr();
 575   1        SCON4R &= 0xFE;
 576   1        R_OD4 = 1;
 577   1        if (R_CN4 < UART4_RX_LENTH - 1)
 578   1          R_CN4++;
 579   1        T_O4 = 5;
 580   1      }
 581          //========================
 582          void uart4_Tisr() interrupt 10
 583          {
 584   1      
 585   1        SCON4T &= 0xFE;
 586   1        Busy4 = 0;
 587   1      }
 588          //=========================
 589          void uart5_Risr() interrupt 13 // 串口5中断接收
 590          {
 591   1        R_u5[R_CN5] = SBUF5_RX;
 592   1        SCON5R &= 0xFE;
 593   1        R_OD5 = 1;
 594   1        if (R_CN5 < UART5_RX_LENTH - 1)
 595   1          R_CN5++;
 596   1        T_O5 = 5;
 597   1      }
 598          //========================
 599          void uart5_Tisr() interrupt 12
 600          {
 601   1        SCON5T &= 0xFE;
 602   1        Busy5 = 0;
 603   1      }
 604          //========================
 605          //*********************************************************
 606          void uart3_Risr() interrupt 16 // 串口3收发中断
 607          {
 608   1        if (SCON3 & 0x01)
 609   1        {
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 11  

 610   2          R_u3[R_CN3] = SBUF3;
 611   2          SCON3 &= 0xFE;
 612   2          //                SCON3&=0xFE;
 613   2          R_OD3 = 1;
 614   2          if (R_CN3 < UART3_RX_LENTH - 1)
 615   2            R_CN3++;
 616   2          T_O3 = 5;
 617   2        }
 618   1        if (SCON3 & 0x02)
 619   1        {
 620   2      
 621   2          SCON3 &= 0xFD;
 622   2          SCON3 &= 0xFD;
 623   2          Busy3 = 0;
 624   2        }
 625   1      }
 626          //*********************************************************
 627          void uart2_Risr() interrupt 4 // 串口2收发中断
 628          {
 629   1        if (RI2 == 1)
 630   1        {
 631   2          R_u2[R_CN2] = SBUF2;
 632   2          SCON2 &= 0xFE;
 633   2          R_OD2 = 1;
 634   2          if (R_CN2 < UART2_RX_LENTH - 1)
 635   2            R_CN2++;
 636   2          T_O2 = 5;
 637   2        }
 638   1        if (TI2 == 1)
 639   1        {
 640   2          SCON2 &= 0xFD;
 641   2          Busy2 = 0;
 642   2        }
 643   1      }
 644          
 645          void user_uart_send(char c)
 646          {
 647   1        uart_send_byte(PRINTF_USART_NUM, c);
 648   1      }
 649          
 650          void UART5_SendString(char *s)
 651          {
 652   1        while (*s) // 检测字符串结束符
 653   1        {
 654   2          user_uart_send(*s++); // 发送当前字符
 655   2        }
 656   1      }
 657          char putchar(char c)
 658          {
 659   1        uart_send_byte(PRINTF_USART_NUM, c);
 660   1        return c;
 661   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3143    ----
   CONSTANT SIZE    =    454    ----
   XDATA SIZE       =   5136     448
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      7       5
C51 COMPILER V9.60.0.0   UART                                                              09/27/2023 17:05:14 PAGE 12  

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
