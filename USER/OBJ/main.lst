C51 COMPILER V9.60.0.0   MAIN                                                              11/02/2023 16:36:08 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\OBJ\main.obj
COMPILER INVOKED BY: C:\Keil_C51\C51\BIN\C51.EXE main.c LARGE OMF2 OPTIMIZE(9,SIZE) BROWSE INCDIR(..\USER;..\FUNC_HANDLE
                    -R;..\GUI_APP) DEBUG PRINT(.\OBJ\main.lst) TABS(2) OBJECT(.\OBJ\main.obj)

line level    source

   1          /*
   2           * @Author: xw.qu
   3           * @Date: 2023-08-31 09:22:42
   4           * @LastEditors: xw.qu
   5           * @LastEditTime: 2023-10-31 09:54:19
   6           * @FilePath: \USER\main.c
   7           * @Description: main.c
   8           *
   9           * Copyright (c) 2023 by xw.qu, All Rights Reserved.
  10           */
  11          
  12          #include "sys.h"
  13          #include "scene.h"
  14          #include "time_scene.h"
  15          
  16          void main(void)
  17          
  18          {
  19   1        unsigned short i = 0;
  20   1        static unsigned char time_100ms = 0;
  21   1        static unsigned char time_10ms = 0;
  22   1        static unsigned char time_200ms = 0;
  23   1        module_t module_read = {0};
  24   1        name_scene_t module_scene_read = {0};
  25   1        timing_content_t timing_content_read = {0};
  26   1        Sys_Cpu_Init();
  27   1        uart_init();
  28   1        mbh_init(19200, 0);
  29   1        mb_data_init(&user_modbus);
  30   1        //   scene_init();
  31   1        //  sys_init();//系统初始化
  32   1        rdtime(); // 更新硬件RTC时间
  33   1        //  beep_ctrl(0);//关闭蜂鸣器声音
  34   1        //  init_beep_enable();
  35   1        init_flash_parameters();
  36   1      
  37   1        for (i = 0; i < MODULE_NUB_LIMIT; i++)
  38   1        {
  39   2          norflash_read(i * 140, (unsigned char *)&module_read, 140);
  40   2          norflash_read(MODULE_FLASH_ADR_END + i * NAME_SCENE_T_SIZE, (unsigned char *)&module_scene_read, NAME_SC
             -ENE_T_SIZE);
  41   2      
  42   2          if (FULL == module_read.data_sta)
  43   2          {
  44   3            write_dgusii_vp(0x3120 + 8 * i, (unsigned char *)module_read.module_name, 8);
  45   3            // USER_PRINTF(" module_read index%bd  flash data is full\n", module_read.index);
  46   3            display_module_information(&module_read, i);
  47   3            add_arr_data(&g_var_module.module_adr[0], module_read.adr, module_read.index);
  48   3          }
  49   2          if (FULL == module_scene_read.data_sta)
  50   2          {
  51   3            write_dgusii_vp(0x4100 + i * 32, (unsigned char *)module_scene_read.scene_name, 8);
  52   3            write_dgusii_vp(0x3320 + i * 8, (unsigned char *)module_scene_read.scene_name, 8);
  53   3            //      USER_PRINTF(" module_scene index%bd  flash data is full\n", module_scene_read.scene_name_index);
C51 COMPILER V9.60.0.0   MAIN                                                              11/02/2023 16:36:08 PAGE 2   

  54   3          }
  55   2        }
  56   1        printf_tab(20, &g_var_module.module_adr[0]);
  57   1        //  norflash_read(TIMING_SCENE_INFOR_FLASH_ADR_SATRT,(unsigned char *)&timing_content,ALL_TIMING_SCENC_INF
             -OR_T_SIZE);
  58   1        norflash_read(TIMING_SCENE_INFOR_FLASH_ADR_SATRT, (unsigned char *)&timing_content, ALL_TIMING_SCENC_INFO
             -R_T_SIZE);
  59   1        //  printf_temp_timing_content(&timing_content_read);
  60   1        for (i = 0; i < TIMING_SCENE_NUB_SIGNLE; i++)
  61   1        {
  62   2          //    norflash_read(TIMING_SCENE_INFOR_FLASH_ADR_SATRT+i*SINGLE_TIMING_SCENC_INFOR_T_SIZE,(unsigned char *
             -)&timing_content_read,SINGLE_TIMING_SCENC_INFOR_T_SIZE);
  63   2          if (1 == timing_content[i].time_scene_set.data_sta)
  64   2          {
  65   3            display_timing_scene_infor(timing_content + i);
  66   3            USER_PRINTF(" timing_content index%d  flash data is full\n", i);
  67   3          }
  68   2          else
  69   2          {
  70   3            USER_PRINTF(" timing_content index%d  flash data is blank\n", i);
  71   3          }
  72   2        }
  73   1        //   printf_timing_content(10);
  74   1        write_dgus(0x1001, 0xff);
  75   1        write_dgusii_vp(0x3110, (unsigned char *)&module_name_tab[0], 6);
  76   1        //  init_pwd_f();
  77   1        // time_scene_init();
  78   1        USER_PRINTF("SYS HAS BEEN INITING\n");
  79   1        simulate_touch();
  80   1        while (1)
  81   1        {
  82   2          Clock();           // RTC时间更新
  83   2          uart_frame_deal(); // 串口数据处理
  84   2          read_dgus_time();  // 设置时间时读取一下时间
  85   2          timing_auto_detect();
  86   2          if (time_tick > 10)
  87   2          {
  88   3            time_tick = 0;
  89   3            time_10ms++;
  90   3          }
  91   2          if (time_10ms > 10)
  92   2          {
  93   3            time_10ms = 0;
  94   3            time_100ms++;
  95   3            module_modify();
  96   3            set_scene_infor_select_sequence_number();
  97   3            set_scene_name_select_sequence_number();
  98   3            set_timing_scene_name_select_sequence_number();
  99   3          }
 100   2          if (time_100ms > 2)
 101   2          {
 102   3            time_100ms = 0;
 103   3            time_200ms++;
 104   3      
 105   3            relay_ctrl(&module);
 106   3            read_timing_module_set_parameter(&module);
 107   3      
 108   3            all_module_on_off();
 109   3            all_dim_on_off();
 110   3            scene_modify();
 111   3            scene_touch_run();
 112   3            select_password_enable();
C51 COMPILER V9.60.0.0   MAIN                                                              11/02/2023 16:36:08 PAGE 3   

 113   3            lock_screen_enable_ctrl();
 114   3          }
 115   2          if (time_200ms > 2)
 116   2          {
 117   3            time_200ms = 0;
 118   3            right_number_of_days_ctrl();
 119   3          }
 120   2          dim_ctrl(&module);
 121   2          module_scene_send();
 122   2          scene_delete_ctrl_send(&module_scene);
 123   2          scene_name_ctrl_send(&module_scene);
 124   2          module_touch_ctrl();
 125   2          mbh_uartTxIsr();
 126   2          mbh_poll();
 127   2          factory_data_reset();
 128   2          timing_scene_run();
 129   2      
 130   2          timed_auto_send();
 131   2          timing_module_parameter_batch_send();
 132   2          automatically_retrieve();
 133   2          auto_add_module();
 134   2          //    timing_module_parameter_week_enable_batch_send();
 135   2          //    operand();
 136   2        }
 137   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    748    ----
   CONSTANT SIZE    =    465    ----
   XDATA SIZE       =      3     354
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
